package kyu5;
import java.util.*;

public class Johnann {


	public static void main(String[]args){
		
		long  a = (long) 11;
		long b = (long) 6;
		long  c = (long) 75;
		long d = (long) 115;
		
		System.out.println("John: " + john(a));
		System.out.println("Ann: " + ann(b));
		System.out.println("John: " + sumJohn(c));
		System.out.println("Ann: " + sumAnn(d));
	}

	    public static List<Long> ann(long n) {
	       
	       List<Long> a = new ArrayList<>();
	       List<Long> j = new ArrayList<>();
	       
	       a.add(0,(long) 1);
	       j.add(0,(long) 0);
	       
    	   long ta = 0;
    	   long tj = 0;

    	   
	       for(int i = 1; i <= (n-1);i++){

	    		   ta = j.get((int) (i-1));
	    		   tj = a.get((int) (i-1));   

		try{
	       j.add((long)(i - a.get((int) ta)));
		}
		
		catch(Exception e){
			j.add((long) 0);
		}

		try{
		       a.add((long)(i - j.get((int) tj)));
			}
			catch(Exception e){
				a.add((long) 0);
			}
	       }
		return a;
	    }
	    
	
public static List<Long> john(long n) {
    List<Long> a = new ArrayList<>();
    List<Long> j = new ArrayList<>();
    
    a.add(0,(long) 1);
    j.add(0,(long) 0);

	long ta = 0;
	long tj = 0;
    
    for(int i = 1; i <= (n-1);i++){
	       
 		   ta = j.get((int) (i-1));
 		   tj = a.get((int) (i-1));   
 		   
	    	   if(ta < 0) {				
	    		   ta = 0;
	       					}   
	    	   if(tj < 0) {				
	    		   tj = 0;
	       					}   

	   		try{
	 	       j.add((long)(i - a.get((int) ta)));
	 		}
	 		catch(Exception e){
	 			j.add((long) 0);
	 		}

	 		try{
	 		       a.add((long)(i - j.get((int) tj)));
	 			}
	 			catch(Exception e){
	 				a.add((long) 0);
	 			}
	 	       }
	 		return j;
 }	

		public static long sumJohn(long n) {
			
			  	List<Long> a = new ArrayList<>();
			    List<Long> j = new ArrayList<>();
			    
			    long sumJohn = 0;
			    
			    a.add(0,(long) 1);
			    j.add(0,(long) 0);

				long ta = 0;
				long tj = 0;
			    
			    for(int i = 1; i <= n-1;i++){
				       
			 		   ta = j.get((int) (i-1));
			 		   tj = a.get((int) (i-1));   
			 		   
				    	   if(ta < 0) {				
				    		   ta = 0;
				       					}   
				    	   if(tj < 0) {				
				    		   tj = 0;
				       					}   

				   		try{
				 	       j.add((long)(i - a.get((int) ta)));
				 		}
				 		catch(Exception e){
				 			j.add((long) 0);
				 		}

				 		try{
				 		       a.add((long)(i - j.get((int) tj)));
				 			}
				 			catch(Exception e){
				 				a.add((long) 0);
				 			}
				 		sumJohn = sumJohn + j.get(i);
				 	       }
				 		return sumJohn;
			
}
		public static long sumAnn(long n) {
			
		  	List<Long> a = new ArrayList<>();
		    List<Long> j = new ArrayList<>();
		    
		    long sumAnn = 1;
		    
		    a.add(0,(long) 1);
		    j.add(0,(long) 0);

			long ta = 0;
			long tj = 0;
		    
		    for(int i = 1; i <= n-1;i++){
			       
		 		   ta = j.get((int) (i-1));
		 		   tj = a.get((int) (i-1));   
		 		   
			    	   if(ta < 0) {				
			    		   ta = 0;
			       					}   
			    	   if(tj < 0) {				
			    		   tj = 0;
			       					}   

			   		try{
			 	       j.add((long)(i - a.get((int) ta)));
			 		}
			 		catch(Exception e){
			 			j.add((long) 0);
			 		}

			 		try{
			 		       a.add((long)(i - j.get((int) tj)));
			 			}
			 			catch(Exception e){
			 				a.add((long) 0);
			 			}
			 		sumAnn = sumAnn + a.get(i);
			 	       }
			 		return sumAnn;
}

}

/*
John and his wife Ann have decided to go to Codewars.

On day 0 Ann will do one kata and John - he wants to know how it is working - 0.

Let us call a(n) the number of katas done by Ann at day n we have a(0) = 1 and in the same manner j(0) = 0.

They have chosen the following rules:

On day n the number of katas done by Ann should be n minus the number of katas done by John at day t, t being equal to the number of katas done by Ann herself at day n - 1.

On day n the number of katas done by John should be n minus the number of katas done by Ann at day t, t being equal to the number of katas done by John himself at day n - 1.

Whoops! I think they need to lay out a little clearer exactly what there're getting themselves into!

Could you write:
1) two functions ann and john (parameter n) giving the list of the numbers of katas Ann and John should take on each day from day 0 to day n - 1 (n days - see first example below)?
2) The total number of katas taken by ann (function sum_ann(n)) and john (function sum_john(n)) from day 0 (inclusive) to day n (exclusive)?
Examples:
john(11) -->  [0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6]
ann(6) -->  [1, 1, 2, 2, 3, 3]

sum_john(75) -->  1720
sum_ann(150) -->  6930 */
